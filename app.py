import os
import streamlit as st
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.document_loaders import TextLoader

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
file_path = "constitution.txt"

# –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
@st.cache_resource
def load_constitution_vectorstore():
    loader = TextLoader(file_path)
    documents = loader.load()

    splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
    chunks = splitter.split_documents(documents)

    embedding = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")
    return Chroma.from_documents(chunks, embedding, persist_directory="db_constitution")

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", layout="wide")
st.title("üß† –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–π AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")

query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏:")

if query:
    with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."):
        vectorstore = load_constitution_vectorstore()
        docs = vectorstore.similarity_search(query, k=3)

        st.subheader("üîé –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã:")
        for doc in docs:
            st.markdown(f"- {doc.page_content}")

        st.success("–ì–æ—Ç–æ–≤–æ!")
